@page "/devices"
@layout BlankLayout
@inject IJSRuntime JS;

<svg xmlns="http://www.w3.org/2000/svg" 
     xmlns:xlink="http://www.w3.org/1999/xlink"
     height="100%" width="100%"
     tabindex="0" style="width:100vw; height:100vh;margin:0px;padding:0px;"
	 @ref="_mainDiv" fill="none">

	<rect width="100%" height="100%" fill="blue" fill-opacity="20%"/>

	<!-- Diagnostics temp only -->
	<svg x="10" y="10" fill="black" height="80">
		<rect width="100%" height="100%" fill="pink" />
		<text x="0" y="20">@string.Format($"Width:  {_displayRectangle.Width}")</text>
		<text x="0" y="40">@string.Format($"Height: {_displayRectangle.Height}")</text>
	</svg>

	<rect y="70" width="@_itemWidth" height="@_itemHeight" fill="black" />

</svg>

@code {

	private bool _firstRender = true;
	private ElementReference _mainDiv;
	private BoundingClientRect _displayRectangle = new BoundingClientRect();
	private double _itemDefaultWidth = 100D;
	private double _itemDefaultScale = 0.1D;
	private double _userScale = 1D;
	private double _itemWidth = 0D;
	private double _itemHeight = 0D;
	private bool _refresh = true;

	protected async override Task OnInitializedAsync()
	{
		await  base.OnInitializedAsync();
		App.Current.MainPage.SizeChanged += OnSizeChanged;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await EnsureDimensionsAsync();
			await _mainDiv.FocusAsync();
			this._firstRender = false;
		}

		Calculate(); // calculate object diff

		if (_refresh)
		{
			_refresh = false;
			Draw();
		}
	}

	private void Calculate()
	{
		var min = Math.Min(_displayRectangle.Width, _displayRectangle.Height);
		var scale = (min * _itemDefaultScale) / 100;
		_itemWidth = _itemDefaultWidth * scale;
		_itemHeight = _itemDefaultWidth * scale;
	}

	private async Task EnsureDimensionsAsync()
	{
		// Get browser dimensions
		var currentRectangle = await JS.InvokeAsync<BoundingClientRect>("PageDOMgetBoundingClientRect", new object[] { _mainDiv });
		if (DoubleEquals(this._displayRectangle.Width, currentRectangle.Width) == false || DoubleEquals(this._displayRectangle.Height, currentRectangle.Height) == false)
		{
			_displayRectangle = currentRectangle;
			_refresh = true;
			// Always draw if dimensions change
			Draw();
		}
	}

	private async void OnSizeChanged(object sender, EventArgs e)
	{
		// Not render yet need to skip then
		if (_firstRender)
		{
			return;
		}

		await EnsureDimensionsAsync();
	}

	private void Draw()
	{
		InvokeAsync(() =>
		{
			this.StateHasChanged();
		});
	}

	public static bool DoubleEquals(double left, double right, double acceptableDifference = 0.001)
	{
		if (acceptableDifference < 0)
		{
			throw new ArgumentOutOfRangeException(nameof(acceptableDifference));
		}
		double difference = Math.Abs(left * acceptableDifference);
		return Math.Abs(left - right) <= difference;
	}

	public class BoundingClientRect
	{
		public double X { get; set; }
		public double Y { get; set; }
		public double Width { get; set; }
		public double Height { get; set; }
		public double Top { get; set; }
		public double Right { get; set; }
		public double Bottom { get; set; }
		public double Left { get; set; }

		public override string ToString()
		{
			return $"Width: {Width}, Height: {Height}";
		}
	}
}
