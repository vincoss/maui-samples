@page "/vue2ComponentParameter"
@inject IJSRuntime JS
@inject JsConsole JSLogger

<!-- NOTE: Must wrap into parent elment otherwise will crash. -->
<div>
    <div id="components-demo">
        <h3>Here is some content generated with Vue</h3>
       <data-context-component :model="context"></data-context-component>
    </div>
</div>

<p>@dataContext.Data.Value</p>
<button class="btn btn-primary" @onclick="onUpdateData">Update Data</button>


<h1>Counter</h1>
<p role="status">Current count: @currentCount</p>
<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code 
{
    private int currentCount = 0;
    private DataContext dataContext = new DataContext();
    private IJSObjectReference? mapInstance;

    private void IncrementCount()
    {
        currentCount++;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
       await JSLogger.WriteLine($"{this.GetType()}: {firstRender}");

        if (firstRender)
        {
            this.dataContext.Data = new Data();
            this.dataContext.Definition = new Definition();

            this.dataContext.Data.Value = "Data value";
            this.dataContext.Definition.Value = "Definition value";

            //this.dataContext.Save = OnSave;
            //this.dataContext.Validate = OnValidate;

            var json = System.Text.Json.JsonSerializer.Serialize(dataContext);

            mapInstance = await JS.InvokeAsync<IJSObjectReference>("vue2ComponentParameter", dataContext);
        }
    }

    private async void onUpdateData()
    {
        var ctx = new DataContext();

        var data = new Data();
        var definition = new Definition();

        data.Value = $"Data value: {DateTime.Now}";
        definition.Value = $"Definition value: {DateTime.Now}";

        ctx.Data = data;
        ctx.Definition = definition;

        await JS.InvokeVoidAsync("setVueContext", mapInstance, ctx);

        //  this.dataContext.data.value = data.value;
    }

    public void onDataEvent()
    {
        Console.WriteLine("onDataEvent");
        this.dataContext.Data.Value = "Data value update from child";
    }

    [JSInvokable]
    public static Task OnSave(Data data)
    {
        return Task.CompletedTask;
    }

    [JSInvokable]
    public static Task OnValidate(Data data)
    {
        return Task.CompletedTask;
    }

    public class DataContext
    {
        public Definition Definition { get; set; } = new Definition();
        public Data Data { get; set; } = new Data();

        public Action<Data> Save;
        public Action<Data> Validate;
    }

    public class Definition
    {
        public string? Value { get; set; } = null;
    }

    public class Data
    {
         public string? Value { get; set; } = null;
    }
}